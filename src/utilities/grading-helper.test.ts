import { calculateGrade, CalculateGradeOptions } from './grading-helper';
import * as moment from 'moment';
// TODO this should somehow be done a level higher to be used for all unit tests
import '../extensions';

const defaultUnusedFields = {
    active: true,
    createdAt: new Date(),
    updatedAt: new Date(),
};

const defaultQuestionUnusedFields = {
    // Ids
    id: -1,
    courseTopicContentId: -1,
    curriculumQuestionId: -1,
    originatingTopicQuestionId: -1,
    // Fields
    weight: 1,
    problemNumber: 1,
    webworkQuestionPath: '',
    optional: false,
    hidden: false,
    ...defaultUnusedFields,
};

const defaultStudentGradeUnusedFields = {
    // Ids
    id: -1,
    courseWWTopicQuestionId: -1,
    userId: -1,
    // Fields
    firstAttempts: 0,
    latestAttempts: 0,
    randomSeed: 0,
    originalRandomSeed: 0,
    ...defaultUnusedFields,
    numExtendedAttempts: 0,
    numLegalAttempts: 0,
};

const defaultTopicUnusedFields = {
    // Ids
    id: -1,
    topicTypeId: -1,
    courseUnitContentId: -1,
    curriculumTopicContentId: -1,
    originatingTopicContentId: -1,
    // Fields
    contentOrder: 0,
    name: 'Topic Name',
    partialExtend: false,
    ...defaultUnusedFields
};

describe('Grading Helper Tests', () => {
    const timeOfSubmission = moment();
    describe('calculateGrade', () => {

        describe('On Time', () => {
            const startDate = moment().subtract(1, 'days');
            const endDate = moment().add(1, 'days');
            const deadDate = moment().add(2, 'days');
            const solutionDate = moment().add(3, 'days');

            const resultIsLate = false;
            const resultIsExpired = false;
            const resultIsOnTime = true;

            describe('Within attempt limit', () => {
                const maxAttempts = 1;
                const numAttempts = 0;

                const resultIsWithinAttemptLimit = true;

                const resultWillTrackAttemptReason = 'YES';

                describe('Has no score', () => {
                    const bestScore = 0;
                    const effectiveScore = 0;
                    const legalScore = 0;
                    const overallBestScore = 0;
                    const partialCreditBestScore = 0;

                    const resultIsCompleted = false;

                    describe('Grade unlocked', () => {
                        const locked = false;
                        const resultIsLocked = false;
                        const resultWillGetCreditReason = 'YES';

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    bestScore: newScore,
                                    effectiveScore: newScore,
                                    legalScore: newScore,
                                    overallBestScore: newScore,
                                    partialCreditBestScore: newScore
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    bestScore: newScore,
                                    effectiveScore: newScore,
                                    legalScore: newScore,
                                    overallBestScore: newScore,
                                    partialCreditBestScore: newScore
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });

                    describe('Grade locked', () => {
                        const locked = true;
                        const resultIsLocked = true;
                        const resultWillGetCreditReason = 'NO_GRADE_LOCKED';

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });
                });

                describe('Has a .5', () => {
                    const bestScore = .5;
                    const effectiveScore = .5;
                    const legalScore = .5;
                    const overallBestScore = .5;
                    const partialCreditBestScore = .5;

                    const resultIsCompleted = false;

                    describe('Grade unlocked', () => {
                        const locked = false;
                        const resultIsLocked = false;
                        const resultWillGetCreditReason = 'YES';

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    bestScore: newScore,
                                    effectiveScore: newScore,
                                    legalScore: newScore,
                                    overallBestScore: newScore,
                                    partialCreditBestScore: newScore
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });

                    describe('Grade locked', () => {
                        const locked = true;
                        const resultIsLocked = true;
                        const resultWillGetCreditReason = 'NO_GRADE_LOCKED';

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });
                });

                describe('Has a 1', () => {
                    const bestScore = 1;
                    const effectiveScore = 1;
                    const legalScore = 1;
                    const overallBestScore = 1;
                    const partialCreditBestScore = 1;

                    const resultIsCompleted = true;
                    // This is an override
                    const resultWillTrackAttemptReason = 'NO_ALREADY_COMPLETED';
                    const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';


                    describe('Grade unlocked', () => {
                        const locked = false;
                        const resultIsLocked = false;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });

                    describe('Grade locked', () => {
                        const locked = true;
                        const resultIsLocked = true;
                        const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });
                });
            });

            describe('At attempt limit', () => {
                const maxAttempts = 1;
                const numAttempts = 1;

                const resultIsWithinAttemptLimit = false;

                const resultWillTrackAttemptReason = 'YES';
                const resultWillGetCreditReason = 'NO_ATTEMPTS_EXCEEDED';

                describe('Has no score', () => {
                    const bestScore = 0;
                    const effectiveScore = 0;
                    const legalScore = 0;
                    const overallBestScore = 0;
                    const partialCreditBestScore = 0;

                    const resultIsCompleted = false;

                    describe('Grade unlocked', () => {
                        const locked = false;
                        const resultIsLocked = false;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });

                    describe('Grade locked', () => {
                        const locked = true;
                        const resultIsLocked = true;
                        const resultWillGetCreditReason = 'NO_GRADE_LOCKED';

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });
                });

                describe('Has a .5', () => {
                    const bestScore = .5;
                    const effectiveScore = .5;
                    const legalScore = .5;
                    const overallBestScore = .5;
                    const partialCreditBestScore = .5;

                    const resultIsCompleted = false;

                    describe('Grade unlocked', () => {
                        const locked = false;
                        const resultIsLocked = false;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });

                    describe('Grade locked', () => {
                        const locked = true;
                        const resultIsLocked = true;
                        const resultWillGetCreditReason = 'NO_GRADE_LOCKED';

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });
                });

                describe('Has a 1', () => {
                    const bestScore = 1;
                    const effectiveScore = 1;
                    const legalScore = 1;
                    const overallBestScore = 1;
                    const partialCreditBestScore = 1;

                    const resultIsCompleted = true;
                    // This is an override
                    const resultWillTrackAttemptReason = 'NO_ALREADY_COMPLETED';
                    const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';


                    describe('Grade unlocked', () => {
                        const locked = false;
                        const resultIsLocked = false;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });

                    describe('Grade locked', () => {
                        const locked = true;
                        const resultIsLocked = true;
                        const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });
                });
            });

            describe('Exceeds attempt limit', () => {
                const maxAttempts = 1;
                const numAttempts = 2;

                const resultIsWithinAttemptLimit = false;

                const resultWillTrackAttemptReason = 'YES';
                const resultWillGetCreditReason = 'NO_ATTEMPTS_EXCEEDED';

                describe('Has no score', () => {
                    const bestScore = 0;
                    const effectiveScore = 0;
                    const legalScore = 0;
                    const overallBestScore = 0;
                    const partialCreditBestScore = 0;

                    const resultIsCompleted = false;

                    describe('Grade unlocked', () => {
                        const locked = false;
                        const resultIsLocked = false;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });

                    describe('Grade locked', () => {
                        const locked = true;
                        const resultIsLocked = true;
                        const resultWillGetCreditReason = 'NO_GRADE_LOCKED';

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });
                });

                describe('Has a .5', () => {
                    const bestScore = .5;
                    const effectiveScore = .5;
                    const legalScore = .5;
                    const overallBestScore = .5;
                    const partialCreditBestScore = .5;

                    const resultIsCompleted = false;

                    describe('Grade unlocked', () => {
                        const locked = false;
                        const resultIsLocked = false;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });

                    describe('Grade locked', () => {
                        const locked = true;
                        const resultIsLocked = true;
                        const resultWillGetCreditReason = 'NO_GRADE_LOCKED';

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });
                });

                describe('Has a 1', () => {
                    const bestScore = 1;
                    const effectiveScore = 1;
                    const legalScore = 1;
                    const overallBestScore = 1;
                    const partialCreditBestScore = 1;

                    const resultIsCompleted = true;
                    // This is an override
                    const resultWillTrackAttemptReason = 'NO_ALREADY_COMPLETED';
                    const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';


                    describe('Grade unlocked', () => {
                        const locked = false;
                        const resultIsLocked = false;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });

                    describe('Grade locked', () => {
                        const locked = true;
                        const resultIsLocked = true;
                        const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });
                });
            });

        });

        describe('Late', () => {
            const startDate = moment().subtract(2, 'days');
            const endDate = moment().subtract(1, 'days');
            const deadDate = moment().add(2, 'days');
            const solutionDate = moment().add(3, 'days');

            const resultIsLate = true;
            const resultIsExpired = false;
            const resultIsOnTime = false;

            describe('Within attempt limit', () => {
                const maxAttempts = 1;
                const numAttempts = 0;

                const resultIsWithinAttemptLimit = true;

                const resultWillTrackAttemptReason = 'YES';

                describe('Has no score', () => {
                    const bestScore = 0;
                    const effectiveScore = 0;
                    const legalScore = 0;
                    const overallBestScore = 0;
                    const partialCreditBestScore = 0;

                    const resultIsCompleted = false;

                    describe('Grade unlocked', () => {
                        const locked = false;
                        const resultIsLocked = false;
                        const resultWillGetCreditReason = 'YES_BUT_PARTIAL_CREDIT';

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    bestScore: newScore / 2,
                                    effectiveScore: newScore / 2,
                                    overallBestScore: newScore,
                                    partialCreditBestScore: newScore / 2
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    bestScore: newScore / 2,
                                    effectiveScore: newScore / 2,
                                    overallBestScore: newScore,
                                    partialCreditBestScore: newScore / 2
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });

                    describe('Grade locked', () => {
                        const locked = true;
                        const resultIsLocked = true;
                        const resultWillGetCreditReason = 'NO_GRADE_LOCKED';

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });
                });

                describe('Has a .5', () => {
                    const bestScore = .5;
                    const effectiveScore = .5;
                    const legalScore = .5;
                    const overallBestScore = .5;
                    const partialCreditBestScore = .5;

                    const resultIsCompleted = false;

                    describe('Grade unlocked', () => {
                        const locked = false;
                        const resultIsLocked = false;
                        const resultWillGetCreditReason = 'YES_BUT_PARTIAL_CREDIT';

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    bestScore: .75,
                                    effectiveScore: .75,
                                    overallBestScore: newScore,
                                    partialCreditBestScore: .75
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });

                    describe('Grade locked', () => {
                        const locked = true;
                        const resultIsLocked = true;
                        const resultWillGetCreditReason = 'NO_GRADE_LOCKED';

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });
                });

                describe('Has a 1', () => {
                    const bestScore = 1;
                    const effectiveScore = 1;
                    const legalScore = 1;
                    const overallBestScore = 1;
                    const partialCreditBestScore = 1;

                    const resultIsCompleted = true;
                    // This is an override
                    const resultWillTrackAttemptReason = 'NO_ALREADY_COMPLETED';
                    const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';


                    describe('Grade unlocked', () => {
                        const locked = false;
                        const resultIsLocked = false;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });

                    describe('Grade locked', () => {
                        const locked = true;
                        const resultIsLocked = true;
                        const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });
                });
            });

            describe('At attempt limit', () => {
                const maxAttempts = 1;
                const numAttempts = 1;

                const resultIsWithinAttemptLimit = false;

                const resultWillTrackAttemptReason = 'YES';
                const resultWillGetCreditReason = 'NO_ATTEMPTS_EXCEEDED';

                describe('Has no score', () => {
                    const bestScore = 0;
                    const effectiveScore = 0;
                    const legalScore = 0;
                    const overallBestScore = 0;
                    const partialCreditBestScore = 0;

                    const resultIsCompleted = false;

                    describe('Grade unlocked', () => {
                        const locked = false;
                        const resultIsLocked = false;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });

                    describe('Grade locked', () => {
                        const locked = true;
                        const resultIsLocked = true;
                        const resultWillGetCreditReason = 'NO_GRADE_LOCKED';

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });
                });

                describe('Has a .5', () => {
                    const bestScore = .5;
                    const effectiveScore = .5;
                    const legalScore = .5;
                    const overallBestScore = .5;
                    const partialCreditBestScore = .5;

                    const resultIsCompleted = false;

                    describe('Grade unlocked', () => {
                        const locked = false;
                        const resultIsLocked = false;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });

                    describe('Grade locked', () => {
                        const locked = true;
                        const resultIsLocked = true;
                        const resultWillGetCreditReason = 'NO_GRADE_LOCKED';

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });
                });

                describe('Has a 1', () => {
                    const bestScore = 1;
                    const effectiveScore = 1;
                    const legalScore = 1;
                    const overallBestScore = 1;
                    const partialCreditBestScore = 1;

                    const resultIsCompleted = true;
                    // This is an override
                    const resultWillTrackAttemptReason = 'NO_ALREADY_COMPLETED';
                    const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';


                    describe('Grade unlocked', () => {
                        const locked = false;
                        const resultIsLocked = false;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });

                    describe('Grade locked', () => {
                        const locked = true;
                        const resultIsLocked = true;
                        const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });
                });
            });

            describe('Exceeds attempt limit', () => {
                const maxAttempts = 1;
                const numAttempts = 2;

                const resultIsWithinAttemptLimit = false;

                const resultWillTrackAttemptReason = 'YES';
                const resultWillGetCreditReason = 'NO_ATTEMPTS_EXCEEDED';

                describe('Has no score', () => {
                    const bestScore = 0;
                    const effectiveScore = 0;
                    const legalScore = 0;
                    const overallBestScore = 0;
                    const partialCreditBestScore = 0;

                    const resultIsCompleted = false;

                    describe('Grade unlocked', () => {
                        const locked = false;
                        const resultIsLocked = false;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });

                    describe('Grade locked', () => {
                        const locked = true;
                        const resultIsLocked = true;
                        const resultWillGetCreditReason = 'NO_GRADE_LOCKED';

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });
                });

                describe('Has a .5', () => {
                    const bestScore = .5;
                    const effectiveScore = .5;
                    const legalScore = .5;
                    const overallBestScore = .5;
                    const partialCreditBestScore = .5;

                    const resultIsCompleted = false;

                    describe('Grade unlocked', () => {
                        const locked = false;
                        const resultIsLocked = false;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });

                    describe('Grade locked', () => {
                        const locked = true;
                        const resultIsLocked = true;
                        const resultWillGetCreditReason = 'NO_GRADE_LOCKED';

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });
                });

                describe('Has a 1', () => {
                    const bestScore = 1;
                    const effectiveScore = 1;
                    const legalScore = 1;
                    const overallBestScore = 1;
                    const partialCreditBestScore = 1;

                    const resultIsCompleted = true;
                    // This is an override
                    const resultWillTrackAttemptReason = 'NO_ALREADY_COMPLETED';
                    const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';


                    describe('Grade unlocked', () => {
                        const locked = false;
                        const resultIsLocked = false;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });

                    describe('Grade locked', () => {
                        const locked = true;
                        const resultIsLocked = true;
                        const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });
                });
            });
        });
        describe('Expired', () => {
            const startDate = moment().subtract(3, 'days');
            const endDate = moment().subtract(2, 'days');
            const deadDate = moment().subtract(1, 'days');
            const solutionDate = moment().add(1, 'days');

            const resultIsLate = false;
            const resultIsExpired = true;
            const resultIsOnTime = false;

            const resultWillGetCreditReason = 'NO_EXPIRED';

            describe('Within attempt limit', () => {
                const maxAttempts = 1;
                const numAttempts = 0;

                const resultIsWithinAttemptLimit = true;

                const resultWillTrackAttemptReason = 'YES';

                describe('Has no score', () => {
                    const bestScore = 0;
                    const effectiveScore = 0;
                    const legalScore = 0;
                    const overallBestScore = 0;
                    const partialCreditBestScore = 0;

                    const resultIsCompleted = false;

                    describe('Grade unlocked', () => {
                        const locked = false;
                        const resultIsLocked = false;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });

                    describe('Grade locked', () => {
                        const locked = true;
                        const resultIsLocked = true;
                        const resultWillGetCreditReason = 'NO_GRADE_LOCKED';

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });
                });

                describe('Has a .5', () => {
                    const bestScore = .5;
                    const effectiveScore = .5;
                    const legalScore = .5;
                    const overallBestScore = .5;
                    const partialCreditBestScore = .5;

                    const resultIsCompleted = false;

                    describe('Grade unlocked', () => {
                        const locked = false;
                        const resultIsLocked = false;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });

                    describe('Grade locked', () => {
                        const locked = true;
                        const resultIsLocked = true;
                        const resultWillGetCreditReason = 'NO_GRADE_LOCKED';

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });
                });

                describe('Has a 1', () => {
                    const bestScore = 1;
                    const effectiveScore = 1;
                    const legalScore = 1;
                    const overallBestScore = 1;
                    const partialCreditBestScore = 1;

                    const resultIsCompleted = true;
                    // This is an override
                    const resultWillTrackAttemptReason = 'NO_ALREADY_COMPLETED';
                    const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';


                    describe('Grade unlocked', () => {
                        const locked = false;
                        const resultIsLocked = false;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });

                    describe('Grade locked', () => {
                        const locked = true;
                        const resultIsLocked = true;
                        const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });
                });
            });

            describe('At attempt limit', () => {
                const maxAttempts = 1;
                const numAttempts = 1;

                const resultIsWithinAttemptLimit = false;

                const resultWillTrackAttemptReason = 'YES';
                const resultWillGetCreditReason = 'NO_ATTEMPTS_EXCEEDED';

                describe('Has no score', () => {
                    const bestScore = 0;
                    const effectiveScore = 0;
                    const legalScore = 0;
                    const overallBestScore = 0;
                    const partialCreditBestScore = 0;

                    const resultIsCompleted = false;

                    describe('Grade unlocked', () => {
                        const locked = false;
                        const resultIsLocked = false;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });

                    describe('Grade locked', () => {
                        const locked = true;
                        const resultIsLocked = true;
                        const resultWillGetCreditReason = 'NO_GRADE_LOCKED';

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });
                });

                describe('Has a .5', () => {
                    const bestScore = .5;
                    const effectiveScore = .5;
                    const legalScore = .5;
                    const overallBestScore = .5;
                    const partialCreditBestScore = .5;

                    const resultIsCompleted = false;

                    describe('Grade unlocked', () => {
                        const locked = false;
                        const resultIsLocked = false;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });

                    describe('Grade locked', () => {
                        const locked = true;
                        const resultIsLocked = true;
                        const resultWillGetCreditReason = 'NO_GRADE_LOCKED';

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });
                });

                describe('Has a 1', () => {
                    const bestScore = 1;
                    const effectiveScore = 1;
                    const legalScore = 1;
                    const overallBestScore = 1;
                    const partialCreditBestScore = 1;

                    const resultIsCompleted = true;
                    // This is an override
                    const resultWillTrackAttemptReason = 'NO_ALREADY_COMPLETED';
                    const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';


                    describe('Grade unlocked', () => {
                        const locked = false;
                        const resultIsLocked = false;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });

                    describe('Grade locked', () => {
                        const locked = true;
                        const resultIsLocked = true;
                        const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });
                });
            });

            describe('Exceeds attempt limit', () => {
                const maxAttempts = 1;
                const numAttempts = 2;

                const resultIsWithinAttemptLimit = false;

                const resultWillTrackAttemptReason = 'YES';
                const resultWillGetCreditReason = 'NO_ATTEMPTS_EXCEEDED';

                describe('Has no score', () => {
                    const bestScore = 0;
                    const effectiveScore = 0;
                    const legalScore = 0;
                    const overallBestScore = 0;
                    const partialCreditBestScore = 0;

                    const resultIsCompleted = false;

                    describe('Grade unlocked', () => {
                        const locked = false;
                        const resultIsLocked = false;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });

                    describe('Grade locked', () => {
                        const locked = true;
                        const resultIsLocked = true;
                        const resultWillGetCreditReason = 'NO_GRADE_LOCKED';

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });
                });

                describe('Has a .5', () => {
                    const bestScore = .5;
                    const effectiveScore = .5;
                    const legalScore = .5;
                    const overallBestScore = .5;
                    const partialCreditBestScore = .5;

                    const resultIsCompleted = false;

                    describe('Grade unlocked', () => {
                        const locked = false;
                        const resultIsLocked = false;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });

                    describe('Grade locked', () => {
                        const locked = true;
                        const resultIsLocked = true;
                        const resultWillGetCreditReason = 'NO_GRADE_LOCKED';

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                    overallBestScore: newScore,
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });
                });

                describe('Has a 1', () => {
                    const bestScore = 1;
                    const effectiveScore = 1;
                    const legalScore = 1;
                    const overallBestScore = 1;
                    const partialCreditBestScore = 1;

                    const resultIsCompleted = true;
                    // This is an override
                    const resultWillTrackAttemptReason = 'NO_ALREADY_COMPLETED';
                    const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';


                    describe('Grade unlocked', () => {
                        const locked = false;
                        const resultIsLocked = false;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });

                    describe('Grade locked', () => {
                        const locked = true;
                        const resultIsLocked = true;
                        const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });
                });
            });
        });
        describe('Solutions available', () => {
            const startDate = moment().subtract(4, 'days');
            const endDate = moment().subtract(3, 'days');
            const deadDate = moment().subtract(2, 'days');
            const solutionDate = moment().subtract(1, 'days');

            const resultIsLate = false;
            const resultIsExpired = false;
            const resultIsOnTime = false;

            const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';
            const resultWillTrackAttemptReason = 'NO_IS_AFTER_SOLUTIONS_DATE';

            describe('Within attempt limit', () => {
                const maxAttempts = 1;
                const numAttempts = 0;

                const resultIsWithinAttemptLimit = true;


                describe('Has no score', () => {
                    const bestScore = 0;
                    const effectiveScore = 0;
                    const legalScore = 0;
                    const overallBestScore = 0;
                    const partialCreditBestScore = 0;

                    const resultIsCompleted = false;

                    describe('Grade unlocked', () => {
                        const locked = false;
                        const resultIsLocked = false;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });

                    describe('Grade locked', () => {
                        const locked = true;
                        const resultIsLocked = true;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });
                });

                describe('Has a .5', () => {
                    const bestScore = .5;
                    const effectiveScore = .5;
                    const legalScore = .5;
                    const overallBestScore = .5;
                    const partialCreditBestScore = .5;

                    const resultIsCompleted = false;

                    describe('Grade unlocked', () => {
                        const locked = false;
                        const resultIsLocked = false;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });

                    describe('Grade locked', () => {
                        const locked = true;
                        const resultIsLocked = true;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });
                });

                describe('Has a 1', () => {
                    const bestScore = 1;
                    const effectiveScore = 1;
                    const legalScore = 1;
                    const overallBestScore = 1;
                    const partialCreditBestScore = 1;

                    const resultIsCompleted = true;
                    // This is an override
                    const resultWillTrackAttemptReason = 'NO_ALREADY_COMPLETED';
                    const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';


                    describe('Grade unlocked', () => {
                        const locked = false;
                        const resultIsLocked = false;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });

                    describe('Grade locked', () => {
                        const locked = true;
                        const resultIsLocked = true;
                        const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });
                });
            });

            describe('At attempt limit', () => {
                const maxAttempts = 1;
                const numAttempts = 1;

                const resultIsWithinAttemptLimit = false;

                describe('Has no score', () => {
                    const bestScore = 0;
                    const effectiveScore = 0;
                    const legalScore = 0;
                    const overallBestScore = 0;
                    const partialCreditBestScore = 0;

                    const resultIsCompleted = false;

                    describe('Grade unlocked', () => {
                        const locked = false;
                        const resultIsLocked = false;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });

                    describe('Grade locked', () => {
                        const locked = true;
                        const resultIsLocked = true;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });
                });

                describe('Has a .5', () => {
                    const bestScore = .5;
                    const effectiveScore = .5;
                    const legalScore = .5;
                    const overallBestScore = .5;
                    const partialCreditBestScore = .5;

                    const resultIsCompleted = false;

                    describe('Grade unlocked', () => {
                        const locked = false;
                        const resultIsLocked = false;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });

                    describe('Grade locked', () => {
                        const locked = true;
                        const resultIsLocked = true;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });
                });

                describe('Has a 1', () => {
                    const bestScore = 1;
                    const effectiveScore = 1;
                    const legalScore = 1;
                    const overallBestScore = 1;
                    const partialCreditBestScore = 1;

                    const resultIsCompleted = true;
                    // This is an override
                    const resultWillTrackAttemptReason = 'NO_ALREADY_COMPLETED';
                    const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';


                    describe('Grade unlocked', () => {
                        const locked = false;
                        const resultIsLocked = false;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });

                    describe('Grade locked', () => {
                        const locked = true;
                        const resultIsLocked = true;
                        const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });
                });
            });

            describe('Exceeds attempt limit', () => {
                const maxAttempts = 1;
                const numAttempts = 2;

                const resultIsWithinAttemptLimit = false;

                describe('Has no score', () => {
                    const bestScore = 0;
                    const effectiveScore = 0;
                    const legalScore = 0;
                    const overallBestScore = 0;
                    const partialCreditBestScore = 0;

                    const resultIsCompleted = false;

                    describe('Grade unlocked', () => {
                        const locked = false;
                        const resultIsLocked = false;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });

                    describe('Grade locked', () => {
                        const locked = true;
                        const resultIsLocked = true;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });
                });

                describe('Has a .5', () => {
                    const bestScore = .5;
                    const effectiveScore = .5;
                    const legalScore = .5;
                    const overallBestScore = .5;
                    const partialCreditBestScore = .5;

                    const resultIsCompleted = false;

                    describe('Grade unlocked', () => {
                        const locked = false;
                        const resultIsLocked = false;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });

                    describe('Grade locked', () => {
                        const locked = true;
                        const resultIsLocked = true;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });
                });

                describe('Has a 1', () => {
                    const bestScore = 1;
                    const effectiveScore = 1;
                    const legalScore = 1;
                    const overallBestScore = 1;
                    const partialCreditBestScore = 1;

                    const resultIsCompleted = true;
                    // This is an override
                    const resultWillTrackAttemptReason = 'NO_ALREADY_COMPLETED';
                    const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';


                    describe('Grade unlocked', () => {
                        const locked = false;
                        const resultIsLocked = false;

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });

                    describe('Grade locked', () => {
                        const locked = true;
                        const resultIsLocked = true;
                        const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';

                        it('Scored 0', () => {
                            const newScore = 0;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);

                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {},
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored .5', () => {
                            const newScore = .5;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });

                        it('Scored 1', () => {
                            const newScore = 1;
                            const params: CalculateGradeOptions = {
                                newScore,
                                question: {
                                    ...defaultQuestionUnusedFields,
                                    maxAttempts,
                                },
                                solutionDate,
                                studentGrade: {
                                    ...defaultStudentGradeUnusedFields,
                                    numAttempts,
                                    bestScore,
                                    effectiveScore,
                                    legalScore,
                                    overallBestScore,
                                    partialCreditBestScore,
                                    locked,
                                },
                                timeOfSubmission,
                                topic: {
                                    ...defaultTopicUnusedFields,
                                    startDate: startDate.toDate(),
                                    endDate: endDate.toDate(),
                                    deadDate: deadDate.toDate(),
                                }
                            };
                            const result = calculateGrade(params);


                            expect(result).toStrictEqual({
                                gradingRationale: {
                                    // isCompleted is false because this object represents why you got the grade that you did
                                    // even though it is completed now it was not at the time of getting the grade
                                    isCompleted: resultIsCompleted,
                                    isExpired: resultIsExpired,
                                    isLocked: resultIsLocked,
                                    isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                    isOnTime: resultIsOnTime,
                                    isLate: resultIsLate,
                                    willTrackAttemptReason: resultWillTrackAttemptReason,
                                    willGetCreditReason: resultWillGetCreditReason
                                },
                                // Nothing should be updated since nothing improved
                                gradeUpdates: {
                                },
                                // Should match score from params
                                score: newScore
                            });
                        });
                    });
                });
            });
        });


        describe('effective score 1', () => {
            const effectiveScore = 1;

            describe('On Time', () => {
                const startDate = moment().subtract(1, 'days');
                const endDate = moment().add(1, 'days');
                const deadDate = moment().add(2, 'days');
                const solutionDate = moment().add(3, 'days');

                const resultIsLate = false;
                const resultIsExpired = false;
                const resultIsOnTime = true;

                describe('Within attempt limit', () => {
                    const maxAttempts = 1;
                    const numAttempts = 0;

                    const resultIsWithinAttemptLimit = true;

                    const resultWillTrackAttemptReason = 'YES';

                    describe('Has no score', () => {
                        const bestScore = 0;
                        const legalScore = 0;
                        const overallBestScore = 0;
                        const partialCreditBestScore = 0;

                        const resultIsCompleted = false;

                        describe('Grade unlocked', () => {
                            const locked = false;
                            const resultIsLocked = false;
                            const resultWillGetCreditReason = 'YES';

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        bestScore: newScore,
                                        legalScore: newScore,
                                        overallBestScore: newScore,
                                        partialCreditBestScore: newScore
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        bestScore: newScore,
                                        legalScore: newScore,
                                        overallBestScore: newScore,
                                        partialCreditBestScore: newScore
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });

                        describe('Grade locked', () => {
                            const locked = true;
                            const resultIsLocked = true;
                            const resultWillGetCreditReason = 'NO_GRADE_LOCKED';

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });
                    });

                    describe('Has a .5', () => {
                        const bestScore = .5;
                        const legalScore = .5;
                        const overallBestScore = .5;
                        const partialCreditBestScore = .5;

                        const resultIsCompleted = false;

                        describe('Grade unlocked', () => {
                            const locked = false;
                            const resultIsLocked = false;
                            const resultWillGetCreditReason = 'YES';

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore: effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        bestScore: newScore,
                                        legalScore: newScore,
                                        overallBestScore: newScore,
                                        partialCreditBestScore: newScore
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });

                        describe('Grade locked', () => {
                            const locked = true;
                            const resultIsLocked = true;
                            const resultWillGetCreditReason = 'NO_GRADE_LOCKED';

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });
                    });

                    describe('Has a 1', () => {
                        const bestScore = 1;
                        const legalScore = 1;
                        const overallBestScore = 1;
                        const partialCreditBestScore = 1;

                        const resultIsCompleted = true;
                        // This is an override
                        const resultWillTrackAttemptReason = 'NO_ALREADY_COMPLETED';
                        const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';


                        describe('Grade unlocked', () => {
                            const locked = false;
                            const resultIsLocked = false;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });

                        describe('Grade locked', () => {
                            const locked = true;
                            const resultIsLocked = true;
                            const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });
                    });
                });

                describe('At attempt limit', () => {
                    const maxAttempts = 1;
                    const numAttempts = 1;

                    const resultIsWithinAttemptLimit = false;

                    const resultWillTrackAttemptReason = 'YES';
                    const resultWillGetCreditReason = 'NO_ATTEMPTS_EXCEEDED';

                    describe('Has no score', () => {
                        const bestScore = 0;
                        const legalScore = 0;
                        const overallBestScore = 0;
                        const partialCreditBestScore = 0;

                        const resultIsCompleted = false;

                        describe('Grade unlocked', () => {
                            const locked = false;
                            const resultIsLocked = false;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });

                        describe('Grade locked', () => {
                            const locked = true;
                            const resultIsLocked = true;
                            const resultWillGetCreditReason = 'NO_GRADE_LOCKED';

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });
                    });

                    describe('Has a .5', () => {
                        const bestScore = .5;
                        const legalScore = .5;
                        const overallBestScore = .5;
                        const partialCreditBestScore = .5;

                        const resultIsCompleted = false;

                        describe('Grade unlocked', () => {
                            const locked = false;
                            const resultIsLocked = false;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });

                        describe('Grade locked', () => {
                            const locked = true;
                            const resultIsLocked = true;
                            const resultWillGetCreditReason = 'NO_GRADE_LOCKED';

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });
                    });

                    describe('Has a 1', () => {
                        const bestScore = 1;
                        const legalScore = 1;
                        const overallBestScore = 1;
                        const partialCreditBestScore = 1;

                        const resultIsCompleted = true;
                        // This is an override
                        const resultWillTrackAttemptReason = 'NO_ALREADY_COMPLETED';
                        const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';


                        describe('Grade unlocked', () => {
                            const locked = false;
                            const resultIsLocked = false;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });

                        describe('Grade locked', () => {
                            const locked = true;
                            const resultIsLocked = true;
                            const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });
                    });
                });

                describe('Exceeds attempt limit', () => {
                    const maxAttempts = 1;
                    const numAttempts = 2;

                    const resultIsWithinAttemptLimit = false;

                    const resultWillTrackAttemptReason = 'YES';
                    const resultWillGetCreditReason = 'NO_ATTEMPTS_EXCEEDED';

                    describe('Has no score', () => {
                        const bestScore = 0;
                        const legalScore = 0;
                        const overallBestScore = 0;
                        const partialCreditBestScore = 0;

                        const resultIsCompleted = false;

                        describe('Grade unlocked', () => {
                            const locked = false;
                            const resultIsLocked = false;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });

                        describe('Grade locked', () => {
                            const locked = true;
                            const resultIsLocked = true;
                            const resultWillGetCreditReason = 'NO_GRADE_LOCKED';

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });
                    });

                    describe('Has a .5', () => {
                        const bestScore = .5;
                        const legalScore = .5;
                        const overallBestScore = .5;
                        const partialCreditBestScore = .5;

                        const resultIsCompleted = false;

                        describe('Grade unlocked', () => {
                            const locked = false;
                            const resultIsLocked = false;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });

                        describe('Grade locked', () => {
                            const locked = true;
                            const resultIsLocked = true;
                            const resultWillGetCreditReason = 'NO_GRADE_LOCKED';

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });
                    });

                    describe('Has a 1', () => {
                        const bestScore = 1;
                        const legalScore = 1;
                        const overallBestScore = 1;
                        const partialCreditBestScore = 1;

                        const resultIsCompleted = true;
                        // This is an override
                        const resultWillTrackAttemptReason = 'NO_ALREADY_COMPLETED';
                        const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';


                        describe('Grade unlocked', () => {
                            const locked = false;
                            const resultIsLocked = false;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });

                        describe('Grade locked', () => {
                            const locked = true;
                            const resultIsLocked = true;
                            const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });
                    });
                });

            });

            describe('Late', () => {
                const startDate = moment().subtract(2, 'days');
                const endDate = moment().subtract(1, 'days');
                const deadDate = moment().add(2, 'days');
                const solutionDate = moment().add(3, 'days');

                const resultIsLate = true;
                const resultIsExpired = false;
                const resultIsOnTime = false;

                describe('Within attempt limit', () => {
                    const maxAttempts = 1;
                    const numAttempts = 0;

                    const resultIsWithinAttemptLimit = true;

                    const resultWillTrackAttemptReason = 'YES';

                    describe('Has no score', () => {
                        const bestScore = 0;
                        const legalScore = 0;
                        const overallBestScore = 0;
                        const partialCreditBestScore = 0;

                        const resultIsCompleted = false;

                        describe('Grade unlocked', () => {
                            const locked = false;
                            const resultIsLocked = false;
                            const resultWillGetCreditReason = 'YES_BUT_PARTIAL_CREDIT';

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        bestScore: newScore / 2,
                                        overallBestScore: newScore,
                                        partialCreditBestScore: newScore / 2
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        bestScore: newScore / 2,
                                        overallBestScore: newScore,
                                        partialCreditBestScore: newScore / 2
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });

                        describe('Grade locked', () => {
                            const locked = true;
                            const resultIsLocked = true;
                            const resultWillGetCreditReason = 'NO_GRADE_LOCKED';

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });
                    });

                    describe('Has a .5', () => {
                        const bestScore = .5;
                        const legalScore = .5;
                        const overallBestScore = .5;
                        const partialCreditBestScore = .5;

                        const resultIsCompleted = false;

                        describe('Grade unlocked', () => {
                            const locked = false;
                            const resultIsLocked = false;
                            const resultWillGetCreditReason = 'YES_BUT_PARTIAL_CREDIT';

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        bestScore: .75,
                                        overallBestScore: newScore,
                                        partialCreditBestScore: .75
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });

                        describe('Grade locked', () => {
                            const locked = true;
                            const resultIsLocked = true;
                            const resultWillGetCreditReason = 'NO_GRADE_LOCKED';

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });
                    });

                    describe('Has a 1', () => {
                        const bestScore = 1;
                        const legalScore = 1;
                        const overallBestScore = 1;
                        const partialCreditBestScore = 1;

                        const resultIsCompleted = true;
                        // This is an override
                        const resultWillTrackAttemptReason = 'NO_ALREADY_COMPLETED';
                        const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';


                        describe('Grade unlocked', () => {
                            const locked = false;
                            const resultIsLocked = false;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });

                        describe('Grade locked', () => {
                            const locked = true;
                            const resultIsLocked = true;
                            const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });
                    });
                });

                describe('At attempt limit', () => {
                    const maxAttempts = 1;
                    const numAttempts = 1;

                    const resultIsWithinAttemptLimit = false;

                    const resultWillTrackAttemptReason = 'YES';
                    const resultWillGetCreditReason = 'NO_ATTEMPTS_EXCEEDED';

                    describe('Has no score', () => {
                        const bestScore = 0;
                        const legalScore = 0;
                        const overallBestScore = 0;
                        const partialCreditBestScore = 0;

                        const resultIsCompleted = false;

                        describe('Grade unlocked', () => {
                            const locked = false;
                            const resultIsLocked = false;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });

                        describe('Grade locked', () => {
                            const locked = true;
                            const resultIsLocked = true;
                            const resultWillGetCreditReason = 'NO_GRADE_LOCKED';

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });
                    });

                    describe('Has a .5', () => {
                        const bestScore = .5;
                        const legalScore = .5;
                        const overallBestScore = .5;
                        const partialCreditBestScore = .5;

                        const resultIsCompleted = false;

                        describe('Grade unlocked', () => {
                            const locked = false;
                            const resultIsLocked = false;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });

                        describe('Grade locked', () => {
                            const locked = true;
                            const resultIsLocked = true;
                            const resultWillGetCreditReason = 'NO_GRADE_LOCKED';

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });
                    });

                    describe('Has a 1', () => {
                        const bestScore = 1;
                        const legalScore = 1;
                        const overallBestScore = 1;
                        const partialCreditBestScore = 1;

                        const resultIsCompleted = true;
                        // This is an override
                        const resultWillTrackAttemptReason = 'NO_ALREADY_COMPLETED';
                        const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';


                        describe('Grade unlocked', () => {
                            const locked = false;
                            const resultIsLocked = false;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });

                        describe('Grade locked', () => {
                            const locked = true;
                            const resultIsLocked = true;
                            const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });
                    });
                });

                describe('Exceeds attempt limit', () => {
                    const maxAttempts = 1;
                    const numAttempts = 2;

                    const resultIsWithinAttemptLimit = false;

                    const resultWillTrackAttemptReason = 'YES';
                    const resultWillGetCreditReason = 'NO_ATTEMPTS_EXCEEDED';

                    describe('Has no score', () => {
                        const bestScore = 0;
                        const legalScore = 0;
                        const overallBestScore = 0;
                        const partialCreditBestScore = 0;

                        const resultIsCompleted = false;

                        describe('Grade unlocked', () => {
                            const locked = false;
                            const resultIsLocked = false;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });

                        describe('Grade locked', () => {
                            const locked = true;
                            const resultIsLocked = true;
                            const resultWillGetCreditReason = 'NO_GRADE_LOCKED';

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });
                    });

                    describe('Has a .5', () => {
                        const bestScore = .5;
                        const legalScore = .5;
                        const overallBestScore = .5;
                        const partialCreditBestScore = .5;

                        const resultIsCompleted = false;

                        describe('Grade unlocked', () => {
                            const locked = false;
                            const resultIsLocked = false;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });

                        describe('Grade locked', () => {
                            const locked = true;
                            const resultIsLocked = true;
                            const resultWillGetCreditReason = 'NO_GRADE_LOCKED';

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });
                    });

                    describe('Has a 1', () => {
                        const bestScore = 1;
                        const legalScore = 1;
                        const overallBestScore = 1;
                        const partialCreditBestScore = 1;

                        const resultIsCompleted = true;
                        // This is an override
                        const resultWillTrackAttemptReason = 'NO_ALREADY_COMPLETED';
                        const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';


                        describe('Grade unlocked', () => {
                            const locked = false;
                            const resultIsLocked = false;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });

                        describe('Grade locked', () => {
                            const locked = true;
                            const resultIsLocked = true;
                            const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });
                    });
                });
            });
            describe('Expired', () => {
                const startDate = moment().subtract(3, 'days');
                const endDate = moment().subtract(2, 'days');
                const deadDate = moment().subtract(1, 'days');
                const solutionDate = moment().add(1, 'days');

                const resultIsLate = false;
                const resultIsExpired = true;
                const resultIsOnTime = false;

                const resultWillGetCreditReason = 'NO_EXPIRED';

                describe('Within attempt limit', () => {
                    const maxAttempts = 1;
                    const numAttempts = 0;

                    const resultIsWithinAttemptLimit = true;

                    const resultWillTrackAttemptReason = 'YES';

                    describe('Has no score', () => {
                        const bestScore = 0;
                        const legalScore = 0;
                        const overallBestScore = 0;
                        const partialCreditBestScore = 0;

                        const resultIsCompleted = false;

                        describe('Grade unlocked', () => {
                            const locked = false;
                            const resultIsLocked = false;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });

                        describe('Grade locked', () => {
                            const locked = true;
                            const resultIsLocked = true;
                            const resultWillGetCreditReason = 'NO_GRADE_LOCKED';

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });
                    });

                    describe('Has a .5', () => {
                        const bestScore = .5;
                        const legalScore = .5;
                        const overallBestScore = .5;
                        const partialCreditBestScore = .5;

                        const resultIsCompleted = false;

                        describe('Grade unlocked', () => {
                            const locked = false;
                            const resultIsLocked = false;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });

                        describe('Grade locked', () => {
                            const locked = true;
                            const resultIsLocked = true;
                            const resultWillGetCreditReason = 'NO_GRADE_LOCKED';

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });
                    });

                    describe('Has a 1', () => {
                        const bestScore = 1;
                        const legalScore = 1;
                        const overallBestScore = 1;
                        const partialCreditBestScore = 1;

                        const resultIsCompleted = true;
                        // This is an override
                        const resultWillTrackAttemptReason = 'NO_ALREADY_COMPLETED';
                        const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';


                        describe('Grade unlocked', () => {
                            const locked = false;
                            const resultIsLocked = false;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });

                        describe('Grade locked', () => {
                            const locked = true;
                            const resultIsLocked = true;
                            const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });
                    });
                });

                describe('At attempt limit', () => {
                    const maxAttempts = 1;
                    const numAttempts = 1;

                    const resultIsWithinAttemptLimit = false;

                    const resultWillTrackAttemptReason = 'YES';
                    const resultWillGetCreditReason = 'NO_ATTEMPTS_EXCEEDED';

                    describe('Has no score', () => {
                        const bestScore = 0;
                        const legalScore = 0;
                        const overallBestScore = 0;
                        const partialCreditBestScore = 0;

                        const resultIsCompleted = false;

                        describe('Grade unlocked', () => {
                            const locked = false;
                            const resultIsLocked = false;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });

                        describe('Grade locked', () => {
                            const locked = true;
                            const resultIsLocked = true;
                            const resultWillGetCreditReason = 'NO_GRADE_LOCKED';

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });
                    });

                    describe('Has a .5', () => {
                        const bestScore = .5;
                        const legalScore = .5;
                        const overallBestScore = .5;
                        const partialCreditBestScore = .5;

                        const resultIsCompleted = false;

                        describe('Grade unlocked', () => {
                            const locked = false;
                            const resultIsLocked = false;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });

                        describe('Grade locked', () => {
                            const locked = true;
                            const resultIsLocked = true;
                            const resultWillGetCreditReason = 'NO_GRADE_LOCKED';

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });
                    });

                    describe('Has a 1', () => {
                        const bestScore = 1;
                        const legalScore = 1;
                        const overallBestScore = 1;
                        const partialCreditBestScore = 1;

                        const resultIsCompleted = true;
                        // This is an override
                        const resultWillTrackAttemptReason = 'NO_ALREADY_COMPLETED';
                        const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';


                        describe('Grade unlocked', () => {
                            const locked = false;
                            const resultIsLocked = false;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });

                        describe('Grade locked', () => {
                            const locked = true;
                            const resultIsLocked = true;
                            const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });
                    });
                });

                describe('Exceeds attempt limit', () => {
                    const maxAttempts = 1;
                    const numAttempts = 2;

                    const resultIsWithinAttemptLimit = false;

                    const resultWillTrackAttemptReason = 'YES';
                    const resultWillGetCreditReason = 'NO_ATTEMPTS_EXCEEDED';

                    describe('Has no score', () => {
                        const bestScore = 0;
                        const legalScore = 0;
                        const overallBestScore = 0;
                        const partialCreditBestScore = 0;

                        const resultIsCompleted = false;

                        describe('Grade unlocked', () => {
                            const locked = false;
                            const resultIsLocked = false;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });

                        describe('Grade locked', () => {
                            const locked = true;
                            const resultIsLocked = true;
                            const resultWillGetCreditReason = 'NO_GRADE_LOCKED';

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });
                    });

                    describe('Has a .5', () => {
                        const bestScore = .5;
                        const legalScore = .5;
                        const overallBestScore = .5;
                        const partialCreditBestScore = .5;

                        const resultIsCompleted = false;

                        describe('Grade unlocked', () => {
                            const locked = false;
                            const resultIsLocked = false;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });

                        describe('Grade locked', () => {
                            const locked = true;
                            const resultIsLocked = true;
                            const resultWillGetCreditReason = 'NO_GRADE_LOCKED';

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                        overallBestScore: newScore,
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });
                    });

                    describe('Has a 1', () => {
                        const bestScore = 1;
                        const legalScore = 1;
                        const overallBestScore = 1;
                        const partialCreditBestScore = 1;

                        const resultIsCompleted = true;
                        // This is an override
                        const resultWillTrackAttemptReason = 'NO_ALREADY_COMPLETED';
                        const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';


                        describe('Grade unlocked', () => {
                            const locked = false;
                            const resultIsLocked = false;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });

                        describe('Grade locked', () => {
                            const locked = true;
                            const resultIsLocked = true;
                            const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });
                    });
                });
            });
            describe('Solutions available', () => {
                const startDate = moment().subtract(4, 'days');
                const endDate = moment().subtract(3, 'days');
                const deadDate = moment().subtract(2, 'days');
                const solutionDate = moment().subtract(1, 'days');

                const resultIsLate = false;
                const resultIsExpired = false;
                const resultIsOnTime = false;

                const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';
                const resultWillTrackAttemptReason = 'NO_IS_AFTER_SOLUTIONS_DATE';

                describe('Within attempt limit', () => {
                    const maxAttempts = 1;
                    const numAttempts = 0;

                    const resultIsWithinAttemptLimit = true;


                    describe('Has no score', () => {
                        const bestScore = 0;
                        const legalScore = 0;
                        const overallBestScore = 0;
                        const partialCreditBestScore = 0;

                        const resultIsCompleted = false;

                        describe('Grade unlocked', () => {
                            const locked = false;
                            const resultIsLocked = false;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });

                        describe('Grade locked', () => {
                            const locked = true;
                            const resultIsLocked = true;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });
                    });

                    describe('Has a .5', () => {
                        const bestScore = .5;
                        const legalScore = .5;
                        const overallBestScore = .5;
                        const partialCreditBestScore = .5;

                        const resultIsCompleted = false;

                        describe('Grade unlocked', () => {
                            const locked = false;
                            const resultIsLocked = false;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });

                        describe('Grade locked', () => {
                            const locked = true;
                            const resultIsLocked = true;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });
                    });

                    describe('Has a 1', () => {
                        const bestScore = 1;
                        const legalScore = 1;
                        const overallBestScore = 1;
                        const partialCreditBestScore = 1;

                        const resultIsCompleted = true;
                        // This is an override
                        const resultWillTrackAttemptReason = 'NO_ALREADY_COMPLETED';
                        const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';


                        describe('Grade unlocked', () => {
                            const locked = false;
                            const resultIsLocked = false;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });

                        describe('Grade locked', () => {
                            const locked = true;
                            const resultIsLocked = true;
                            const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });
                    });
                });

                describe('At attempt limit', () => {
                    const maxAttempts = 1;
                    const numAttempts = 1;

                    const resultIsWithinAttemptLimit = false;

                    describe('Has no score', () => {
                        const bestScore = 0;
                        const legalScore = 0;
                        const overallBestScore = 0;
                        const partialCreditBestScore = 0;

                        const resultIsCompleted = false;

                        describe('Grade unlocked', () => {
                            const locked = false;
                            const resultIsLocked = false;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });

                        describe('Grade locked', () => {
                            const locked = true;
                            const resultIsLocked = true;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });
                    });

                    describe('Has a .5', () => {
                        const bestScore = .5;
                        const legalScore = .5;
                        const overallBestScore = .5;
                        const partialCreditBestScore = .5;

                        const resultIsCompleted = false;

                        describe('Grade unlocked', () => {
                            const locked = false;
                            const resultIsLocked = false;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });

                        describe('Grade locked', () => {
                            const locked = true;
                            const resultIsLocked = true;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });
                    });

                    describe('Has a 1', () => {
                        const bestScore = 1;
                        const legalScore = 1;
                        const overallBestScore = 1;
                        const partialCreditBestScore = 1;

                        const resultIsCompleted = true;
                        // This is an override
                        const resultWillTrackAttemptReason = 'NO_ALREADY_COMPLETED';
                        const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';


                        describe('Grade unlocked', () => {
                            const locked = false;
                            const resultIsLocked = false;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });

                        describe('Grade locked', () => {
                            const locked = true;
                            const resultIsLocked = true;
                            const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });
                    });
                });

                describe('Exceeds attempt limit', () => {
                    const maxAttempts = 1;
                    const numAttempts = 2;

                    const resultIsWithinAttemptLimit = false;

                    describe('Has no score', () => {
                        const bestScore = 0;
                        const legalScore = 0;
                        const overallBestScore = 0;
                        const partialCreditBestScore = 0;

                        const resultIsCompleted = false;

                        describe('Grade unlocked', () => {
                            const locked = false;
                            const resultIsLocked = false;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });

                        describe('Grade locked', () => {
                            const locked = true;
                            const resultIsLocked = true;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });
                    });

                    describe('Has a .5', () => {
                        const bestScore = .5;
                        const legalScore = .5;
                        const overallBestScore = .5;
                        const partialCreditBestScore = .5;

                        const resultIsCompleted = false;

                        describe('Grade unlocked', () => {
                            const locked = false;
                            const resultIsLocked = false;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });

                        describe('Grade locked', () => {
                            const locked = true;
                            const resultIsLocked = true;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });
                    });

                    describe('Has a 1', () => {
                        const bestScore = 1;
                        const legalScore = 1;
                        const overallBestScore = 1;
                        const partialCreditBestScore = 1;

                        const resultIsCompleted = true;
                        // This is an override
                        const resultWillTrackAttemptReason = 'NO_ALREADY_COMPLETED';
                        const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';


                        describe('Grade unlocked', () => {
                            const locked = false;
                            const resultIsLocked = false;

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });

                        describe('Grade locked', () => {
                            const locked = true;
                            const resultIsLocked = true;
                            const resultWillGetCreditReason = 'NO_ATTEMPT_NOT_RECORDED';

                            it('Scored 0', () => {
                                const newScore = 0;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);

                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {},
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored .5', () => {
                                const newScore = .5;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });

                            it('Scored 1', () => {
                                const newScore = 1;
                                const params: CalculateGradeOptions = {
                                    newScore,
                                    question: {
                                        ...defaultQuestionUnusedFields,
                                        maxAttempts,
                                    },
                                    solutionDate,
                                    studentGrade: {
                                        ...defaultStudentGradeUnusedFields,
                                        numAttempts,
                                        bestScore,
                                        effectiveScore,
                                        legalScore,
                                        overallBestScore,
                                        partialCreditBestScore,
                                        locked,
                                    },
                                    timeOfSubmission,
                                    topic: {
                                        ...defaultTopicUnusedFields,
                                        startDate: startDate.toDate(),
                                        endDate: endDate.toDate(),
                                        deadDate: deadDate.toDate(),
                                    }
                                };
                                const result = calculateGrade(params);


                                expect(result).toStrictEqual({
                                    gradingRationale: {
                                        // isCompleted is false because this object represents why you got the grade that you did
                                        // even though it is completed now it was not at the time of getting the grade
                                        isCompleted: resultIsCompleted,
                                        isExpired: resultIsExpired,
                                        isLocked: resultIsLocked,
                                        isWithinAttemptLimit: resultIsWithinAttemptLimit,
                                        isOnTime: resultIsOnTime,
                                        isLate: resultIsLate,
                                        willTrackAttemptReason: resultWillTrackAttemptReason,
                                        willGetCreditReason: resultWillGetCreditReason
                                    },
                                    // Nothing should be updated since nothing improved
                                    gradeUpdates: {
                                    },
                                    // Should match score from params
                                    score: newScore
                                });
                            });
                        });
                    });
                });
            });
        });

    });
});
